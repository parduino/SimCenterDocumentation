:page_template: vega.html

Steel Frame: Bayesian Calibration
======================================

+---------------+-----------------------------------------------------+
| Problem files | `quo-08 <https://github.com/claudioper              |
|               | ez/SimCenterDocumentation/tree/examples/docs/common |
|               | /user_manual/examples/desktop/quoFEM/src/quo-08>`__ |
+---------------+-----------------------------------------------------+

In this example, Bayesian estimation is used to estimate column
stiffnesses of a simple steel frame, given data about itâ€™s mode shapes
and frequencies.

Provided by Professor Joel Conte and his doctoral students Maitreya
Kurumbhati and Mukesh Ramancha from UC San Diego, this example looks at
the following simplified finite element model of a steel building.


.. figure:: frame/frameFE.png
   :align: center
   :width: 300
   :figclass: align-center


Each floor slab of the building is made of composite metal deck and is
supported on four steel columns. The story heights are measured at
:math:`10'` and in plan the side lengths measure :math:`33'-4"` by
:math:`30'`. Properties of the steel columns are taken deterministically
with an elastic modulus of :math:`29,000 \mathrm{ksi}`, area of
:math:`110 \mathrm{in}^2`, and principal moment of inertial
(:math:`I_{yy}`) of :math:`1190 \mathrm{ in}^4`. For modelling purposes,
the four columns are assumed fixed at the base and the beams connecting
them are assumed to be rigid. The first two vibration periods of the
structure are determined to be :math:`0.19 \mathrm{sec}` and :math:`0.09 \mathrm{sec}`.

Using these properties, the following set of mode shapes and frequencies
are generated by applying random perturbations to the analytic modal
properties in order to simulate field data that might be obtained using
a method for structural system identification.

.. math::

   \begin{array}{l}
   \lambda_{1}^{(1)}=1025.21, \lambda_{1}^{(2)}=1138.11, \quad \lambda_{1}^{(3)}=1099.39, \quad \lambda_{1}^{(4)}=1002.41, \quad \lambda_{1}^{(5)}=1052.69 \\
   \phi_{12}^{(1)}=1.53, \quad \phi_{12}^{(2)}=1.24, \quad \phi_{12}^{(3)}=1.38, \quad \phi_{12}^{(4)}=1.50, \quad \phi_{12}^{(5)}=1.35
   \end{array}

Our goal will be to reobtain the original column moments of inertia from
this data using a conventional calibration procedure.

The unknown quantities of interest are the moments of inertia for the
first and second story columns (``Ic1`` and ``Ic2`` respectively), on
which we impose the the following bounds and initial estimates:

1. First story column moment of inertia, ``Ic1``: **ContinuousDesign**
   distribution with a initial point :math:`(X_0)` of :math:`1500.0`,
   lower bound :math:`(L_B)` of :math:`500.0`, upper bound :math:`(U_B)`
   of :math:`2000.0`,

2. Second story column moment of inertia, ``Ic2``: **ContinuousDesign**
   distribution with a initial point :math:`(X_0)` of :math:`500.0`,
   lower bound :math:`(L_B)` of :math:`500.0`, upper bound :math:`(U_B)`
   of :math:`2000.0`,


The exercise requires a single OpenSees script file. The user is required to download this file and place it in a **NEW** folder. The file: 

1. `fem.tcl <https://raw.githubusercontent.com/claudioperez/SimCenterExamples/master/static/frame/fem.tcl>`_ 

.. literalinclude:: frame/fem.tcl
   :language: tcl

.. note::
   1. The tcl script when it runs creates a ``results.out``. As a consequence, no postprocessing script is needed.

.. warning::

   Do not place the files in your root, downloads, or desktop folder as when the application runs it will copy the contents on the directories and subdirectories containing these files multiple times. If you are like me, your root, Downloads or Documents folders contains and awful lot of files.

The steps involved:

1. Start the application and the UQ Selection will be highlighted. In the panel for the UQ selection, keep the UQ engine as that selected, i.e. Dakota. In the **UQ Method** category drop down menu change the category to **Inverse Problem**, the method as **DREAM**,  and the remaining parameters as shown in the figure.


.. figure:: frame/joelBayeUQ.png
   :align: center
   :figclass: align-center

2. Next select the **FEM** tab from the input panel selection. This will default to the OpenSees FEM engine. For the main script copy the path name to the ``fem.tcl`` file or select **choose** and navigate to the file. 

.. figure:: frame/joelBayeFEM.png
   :align: center
   :figclass: align-center

.. note::

   As discussed but it is worth noting again, because the script generates a ``results.out`` file, no postprocessing script is needed for this example. This might not always be the case for some of your problems.

3. Next select the **RV** tab from the input panel. This should be prepopulated with two random variables with same names as those having ``pset`` in the tcl script, i.e. ``Ic1`` and ``Ic2``. For each variable, from the drop down menu change them from having a constant distribution to a continuous design one and then provide the lower bounds and upper bounds shown in the figure below.


.. figure:: frame/joelBayeRV.png
   :align: center
   :figclass: align-center


4. Next select the **QoI** panel. Here enter **10** variable names. The following figure shows the first nine names used; the tenth entry used, which does not show up in the image was ``eps_p5``.


.. figure:: frame/joelCalQoI.png
   :align: center
   :figclass: align-center

.. note::   

   For this particular problem setup in which the user is not using a postprocessing script, the user may specify any names for the QoI variables. They are only being used by Dakota to return information on the errors.

5. Next click on the **Run** button. This will cause the backend application to launch Dakota. When done the **RES** tab will be selected and the results will be displayed as shown in the figure below. The figure shows Dakota returned, for inputs provided, estimates of our unknown parameters, ``Ic1`` and ``Ic2`` are **1168.83** and **1211.25** respectively.

.. 
   .. figure:: frame/joelBayeRES.png
      :width: 300
      :align: center
      :figclass: align-center

.. 
   .. note::

      1. The computed values compare favorably to the values used to generate the 'observed results' when developing this problem, these being the values shown in the script, i.e. :math:`m1=0.52` and :math:`m2=0.26`. 

      2. It would prove useful for you to adjust the parameters, observed values and inputs for the continuous design variables. The numbers were chosen to demonstrate the methods can give good results. They do not always return such good numbers.

   